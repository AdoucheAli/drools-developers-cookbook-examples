package drools.cookbook.chapter01

import java.util.Date
import java.util.List

import drools.cookbook.chapter01.Server
import drools.cookbook.chapter01.Virtualization

global java.util.List serversAvailability;

rule "check minimum server configuration"
dialect "mvel"
salience 100
when
	$server : Server(processors < 2 || memory<=1024 || diskSpace<=250)
then
	System.out.println("Server \"" + $server.name + "\" was rejected by don't apply the minimum configuration.");
	retract($server);
end

/*
rule "check available server for a new virtualization"
dialect "mvel"
when
	$virtualization : Virtualization()
	$server : Server($memory : memory, $diskSpace : diskSpace, virtualizations !=null)
	$freeMemory : Number(intValue > 0) from accumulate (Virtualization($vmemory : memory) from $server.virtualizations,
											init(int total = $memory - $virtualization.memory),
											action(total -= $vmemory;),
                              				reverse(total += $vmemory;),
                              				result(total))
	$freeDiskSpace : Number(intValue > 0) from accumulate (Virtualization($vdiskSpace : diskSpace) from $server.virtualizations,
											init(int total = $diskSpace - $virtualization.diskSpace),
											action(total -= $vdiskSpace;),
                              				reverse(total += $vdiskSpace;),
                              				result(total))
then
	ServerStatus serverStatus = new ServerStatus();
	serverStatus.name = $server.name;
	serverStatus.freeMemory = $freeMemory;
	serverStatus.percentageFreeMemory = $freeMemory * 100 / $memory;
	serverStatus.freeDiskSpace = $freeDiskSpace;
	serverStatus.percentageFreeDiskSpace = $freeDiskSpace * 100 / $memory;
	serversAvailability.add(serverStatus);
end
*/
